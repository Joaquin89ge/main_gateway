// Protocol.cpp (JSON support)
// 22:00 14/6/2025
#include "protocol.h"

namespace Protocol
{

    std::vector<String> fragmentWithCRC(const String &fullMessagePayload)
    {
        std::vector<String> outputFragments;

        // Calcular el CRC32 del mensaje completo original UNA SOLA VEZ
        crc.reset();
        crc.update(fullMessagePayload.c_str(), fullMessagePayload.length());
        uint32_t messageCrc = crc.finalize();

        int totalPayloadLen = fullMessagePayload.length();
        int numDataFragments = (totalPayloadLen + RH_MESH_MAX_MESSAGE_LEN - 1) / RH_MESH_MAX_MESSAGE_LEN;


        // 1. Generar fragmentos de datos "puros"
        for (int i = 0; i < numDataFragments; ++i)
        {
            int startIndex = i * MAX_DATA_PAYLOAD_LEN;
            int currentFragmentPayloadLen = min((int)RH_MESH_MAX_MESSAGE_LEN, totalPayloadLen - startIndex);
            String currentPayloadPart = fullMessagePayload.substring(startIndex, startIndex + currentFragmentPayloadLen);

            if (currentPayloadPart.length() > RH_MESH_MAX_MESSAGE_LEN)
            {
                DEBUG_PRINTLN("ERROR: Un fragmento de datos excede RH_MESH_MAX_MESSAGE_LEN. Esto no debería pasar.");
                outputFragments.clear();
                return outputFragments;
            }

            outputFragments.push_back(currentPayloadPart);
            DEBUG_PRINT("  Fragmento DATA #");
            DEBUG_PRINT(i);
        }


        // 2. Generar el mensaje final con el CRC y la longitud original
        // El formato del string CRC será: "CRC:XXXXXXXX"
        // Donde XXXXXXXX es el CRC en hex
        // Un array de 4 caracteres (bytes)
        // No necesita ser 'char[5]' porque no vamos a añadir el '\0'
        char crc_bytes[4];

        // Copia directamente los 4 bytes de my_crc al array crc_bytes.
        // El orden de los bytes en el array dependerá del endianness de tu microcontrolador.
        // En la mayoría de Arduinos (ESP32, AVR, etc.), es little-endian.
        memcpy(crc_bytes, &my_crc, sizeof(uint32_t));
        String crcMessage = String(crc_bytes);

        if (crcMessage.length() > RH_MESH_MAX_MESSAGE_LEN)
        {
            DEBUG_PRINTLN("ERROR: El mensaje CRC_FINAL excede RH_MESH_MAX_MESSAGE_LEN. El formato del CRC es demasiado largo.");
            outputFragments.clear();
            return outputFragments;
        }

        outputFragments.push_back(crcMessage); // Este es el último String en el vector
        DEBUG_PRINT("  Mensaje CRC_FINAL (len: ");
        DEBUG_PRINT(crcMessage.length());
        DEBUG_PRINT("): ");
        DEBUG_PRINTLN(crcMessage);
        DEBUG_PRINTLN("NO errors");
        return outputFragments;
    }


String joinStringVector(const std::vector<String>& stringList) {
    String resultString = ""; // Inicializa un String vacío para almacenar el resultado

    // Itera sobre cada String en el vector
    // 'const String& s' usa una referencia constante para evitar copias innecesarias
    // y asegurar que el String original no se modifique.
    for (const String& s : stringList) {
        // Concatena el String actual al String resultante.
        // El operador '+=` de la clase String maneja la expansión del buffer
        // automáticamente si es necesario.
        resultString += s;
    }

    // Devuelve el String grande que contiene todos los fragmentos unidos.
    return resultString;
}


StaticJsonDocument<JSON_DOC_SIZE> parseJsonString(const String& jsonInputString) {
  // Crea una instancia de StaticJsonDocument en la pila. El tamaño de memoria
  // se asigna en tiempo de compilación según JSON_DOC_SIZE.
  StaticJsonDocument<JSON_DOC_SIZE> doc;

  // Intenta deserializar la cadena JSON de entrada en el 'doc' JsonDocument.
  // El resultado 'error' indicará si la operación fue exitosa o si hubo algún problema.
  DeserializationError error = deserializeJson(doc, jsonInputString);

  // Verifica si la deserialización encontró algún error.
  if (error) {
    // Imprime un mensaje de error detallado en el Serial Monitor.
    // 'error.f_str()' devuelve una descripción del error desde la memoria Flash.
    DEBUG_PRINT(F("ERROR en deserializeJson(): "));
    DEBUG_PRINTLN(error.f_str());

    // Retorna un JsonDocument vacío para indicar que la operación falló.
    // El llamador debe verificar si el documento retornado es nulo (`.isNull()`).
    return doc; // En caso de error, 'doc' permanece vacío o con contenido parcial inválido
  }

  // A partir de aquí, la deserialización se considera exitosa.
  // Puedes empezar a acceder a los elementos del JSON de forma segura.

  // Acceso al campo 'date' principal del documento.
  // Se obtiene como 'const char*' para evitar una copia a String si solo se necesita leer.
  const char* mainDate = doc[F("date")].as<const char*>();
  // DEBUG_PRINT(F("Fecha principal: ")); DEBUG_PRINTLN(mainDate); // Descomentar para depurar

  // Itera sobre el array 'atmosphere'.
  // Se castre explícitamente a JsonArray para asegurar que es un array antes de iterar.
  for (JsonObject atmosphere_item : doc[F("atmosphere")].as<JsonArray>()) {
    // Acceso a los campos de cada objeto dentro del array 'atmosphere'.
    float atmosphere_item_temp = atmosphere_item[F("temp")].as<float>();
    float atmosphere_item_moisture = atmosphere_item[F("moisture")].as<float>();
    const char* atmosphere_item_date = atmosphere_item[F("date")].as<const char*>();

    // DEBUG_PRINT(F("  Atmosphere - Temp: ")); DEBUG_PRINT(atmosphere_item_temp);
    // DEBUG_PRINT(F(", Moisture: ")); DEBUG_PRINT(atmosphere_item_moisture);
    // DEBUG_PRINT(F(", Date: ")); DEBUG_PRINTLN(atmosphere_item_date); // Descomentar para depurar
  }

  // Acceso al objeto 'ground'.
  JsonObject ground = doc[F("ground")].as<JsonObject>();
  float ground_temp = ground[F("temp")].as<float>();
  int ground_moisture = ground[F("moisture")].as<int>();
  int ground_npk = ground[F("npk")].as<int>();
  float ground_EC = ground[F("EC")].as<float>();
  float ground_PH = ground[F("PH")].as<float>();

  // DEBUG_PRINT(F("  Ground - Temp: ")); DEBUG_PRINT(ground_temp); // Descomentar para depurar
  // DEBUG_PRINT(F(", Moisture: ")); DEBUG_PRINT(ground_moisture);
  // DEBUG_PRINT(F(", NPK: ")); DEBUG_PRINT(ground_npk);
  // DEBUG_PRINT(F(", EC: ")); DEBUG_PRINT(ground_EC);
  // DEBUG_PRINT(F(", PH: ")); DEBUG_PRINTLN(ground_PH);

  // Acceso al objeto 'gps'.
  JsonObject gps = doc[F("gps")].as<JsonObject>();
  int gps_latitude = gps[F("latitude")].as<int>();
  int gps_longitude = gps[F("longitude")].as<int>();
  int gps_altitudeMeters = gps[F("altitudeMeters")].as<int>();
  int gps_hour = gps[F("hour")].as<int>();
  int gps_minute = gps[F("minute")].as<int>();
  int gps_second = gps[F("second")].as<int>();

  // DEBUG_PRINT(F("  GPS - Lat: ")); DEBUG_PRINT(gps_latitude); // Descomentar para depurar
  // DEBUG_PRINT(F(", Lon: ")); DEBUG_PRINT(gps_longitude);
  // DEBUG_PRINT(F(", Alt: ")); DEBUG_PRINT(gps_altitudeMeters);
  // DEBUG_PRINT(F(", Time: ")); DEBUG_PRINT(gps_hour); DEBUG_PRINT(":"); DEBUG_PRINT(gps_minute); DEBUG_PRINT(":"); DEBUG_PRINTLN(gps_second);

  // Si llegamos hasta aquí, la deserialización y el acceso a los datos fueron exitosos.
  return doc; // Retorna el JsonDocument lleno.
}

String serializeJsonToString(const StaticJsonDocument<JSON_DOC_SIZE>& doc) {
    String output; // Crea un objeto String vacío para almacenar la salida JSON.

    // Intenta reducir el uso de memoria del documento a su mínimo necesario.
    // Esto es especialmente útil para DynamicJsonDocument, pero no hace daño aquí.
    // Solo libera memoria si el documento ha crecido más allá de lo necesario.
    doc.shrinkToFit();

    // Serializa el contenido del JsonDocument 'doc' en el objeto String 'output'.
    // Esta función maneja el formateo correcto (comillas, comas, etc.).
    serializeJson(doc, output);

    // Retorna el String que ahora contiene el JSON serializado.
    return output;
}

} // namespace Protocol
